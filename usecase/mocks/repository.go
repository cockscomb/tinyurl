// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cockscomb/tinyurl/usecase (interfaces: URLStore)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/cockscomb/tinyurl/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockURLStore is a mock of URLStore interface.
type MockURLStore struct {
	ctrl     *gomock.Controller
	recorder *MockURLStoreMockRecorder
}

// MockURLStoreMockRecorder is the mock recorder for MockURLStore.
type MockURLStoreMockRecorder struct {
	mock *MockURLStore
}

// NewMockURLStore creates a new mock instance.
func NewMockURLStore(ctrl *gomock.Controller) *MockURLStore {
	mock := &MockURLStore{ctrl: ctrl}
	mock.recorder = &MockURLStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLStore) EXPECT() *MockURLStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockURLStore) Create(arg0 context.Context, arg1 *entity.TinyURL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockURLStoreMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockURLStore)(nil).Create), arg0, arg1)
}

// Find mocks base method.
func (m *MockURLStore) Find(arg0 context.Context, arg1 string) (*entity.TinyURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(*entity.TinyURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockURLStoreMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockURLStore)(nil).Find), arg0, arg1)
}
